import*as re from"https://deno.land/std@0.184.0/fs/mod.ts";import*as ae from"https://deno.land/std@0.184.0/path/mod.ts";import*as ie from"https://deno.land/x/cliffy@v0.25.7/mod.ts";import*as y from"https://deno.land/std@0.184.0/semver/mod.ts";import*as g from"https://deno.land/std@0.184.0/semver/mod.ts";var ce={denoLand:"deno_land",npmPackage:"npm_package",rawGitHub:"raw_github",esmSh:"esm_sh",unknown:"unknown"},p=ce;var h=function(e){let o=e.lastIndexOf("@");return o<=0?[e,""]:[e.slice(0,o),e.slice(o+1)]},D=function(e,o=!1){let n=/\x1b\[\d+(;\d+)*m/g,s=e.reduce((l,c)=>l>=c.length?l:c.length,0),t=new Array(s).fill(0).map(()=>new Array(e.length).fill(0)),a=new Array(e.length).fill(0).map(()=>new Array(s).fill(0));e.forEach((l,c)=>l.forEach((d,m)=>{let v=d.replace(n,"").length;t[m][c]=v,a[c][m]=d.length-v}));let r=t.map(l=>l.reduce((c,d)=>c>=d?c:d)),i=e.map((l,c)=>l.map((d,m)=>(d+" ".repeat(r[m])).slice(0,r[m]+a[c][m])));return o&&i.splice(1,0,r.map(l=>"-".repeat(l))),i.map(l=>l.join(" ")).join(`
`)};var I=e=>e.reduce((o,n)=>g.gt(n,o)?n:o),ue=function(e,o){let n=`>=${e}`;return o==="major"||(o==="minor"?n+=` <=${e.major}`:o==="patch"&&(n+=` <=${e.major}.${e.minor}`)),n},pe=async function(e){let o=`https://registry.npmjs.org/${e}`,n=await fetch(o);if(!n.ok)return null;let s=JSON.parse(await n.text());return Object.keys(s.versions).map(a=>g.parse(a)).filter(a=>a!==null)},me=async function(e){let o=`https://apiland.deno.dev/v2/modules/${e}`,n=await fetch(o);return n.ok?JSON.parse(await n.text()).versions.map(a=>g.parse(a)).filter(a=>a!==null):null},de=async function(e,o){let n={Accept:"application/vnd.github+json","X-GitHub-Api-Version":"2022-11-28"};typeof o=="string"&&Object.defineProperty(n,"Authorization",{value:`Bearer ${o}`});let s=await fetch(`https://api.github.com/repos/${e}/releases`,{headers:n});return s.ok?JSON.parse(await s.text()).map(r=>g.parse(r.tag_name)).filter(r=>r!==null):null},J=async function(e){let o=/^\/\* esm.sh - (\S+) \*\//,n=await fetch(e);if(!n.ok)return null;let t=(await n.text()).match(o);if(t===null)return null;let[a,r]=h(t[1]);return r},fe=async function(e,o){let n=`https://esm.sh/${e}`,s=`${n}@${o}`,t=g.parse(await J(n)),a=g.parse(await J(s));return t===null||a===null?null:{latest:t,latestInRange:a}},U=new Map,E=async function(e,o,n,s){let t={includePrerelease:s.usePrerelease};if(e===p.denoLand||e===p.npmPackage||e===p.rawGitHub){let a=e+":"+o,r=U.get(a),i=null;if(typeof r!="undefined"?i=r:(e===p.denoLand?i=await me(o):e===p.npmPackage?i=await pe(o):e===p.rawGitHub&&(i=await de(o,s.gitHubToken)),U.set(a,i)),i===null||i.length<1)return null;let l=i.filter(v=>g.satisfies(v,n,t));if(l.length<1)return null;let c=I(l),d=ue(c,s.level),m=i.filter(v=>g.satisfies(v,d,t));return{latest:I(m),latestInRange:c}}else if(e===p.esmSh)return fe(o,n);return null};var ge=async function(e,o){let n=y.parse(e.version??"")!==null,s=await E(e.type,e.name,e.version??"",o);if(s===null)return{module:e,fixed:n,found:!1};let t=s.latest,a=s.latestInRange,r="none";return y.gt(t,a,{includePrerelease:!0})&&(t.major>a.major?r="major":t.minor>a.minor?r="minor":t.patch>a.patch?r="patch":r="pre_release"),{module:e,fixed:n,found:!0,outdated:r!=="none",outdatedLevel:r,latestVersion:t.version,latestVersionInRange:a.version}},k=ge;import*as j from"https://deno.land/std@0.184.0/fs/mod.ts";import*as C from"https://deno.land/std@0.184.0/path/mod.ts";var G={test:/^https?:\/\/deno.land/,parse:e=>{let o=new URL(e).pathname.split("/").slice(1),n=o[0]==="x"?o[1]:o[0],[s,t]=h(n);return{type:p.denoLand,name:s,version:t}}},_={test:/^https?:\/\/raw.githubusercontent.com/,parse:e=>{let o=new URL(e).pathname.split("/").slice(1),n=`${o[0]}/${o[1]}`,s=o[2];return{type:p.rawGitHub,name:n,version:s}}},H={test:/^npm:/,parse:e=>{let[o,n]=h(e.slice(4));return{type:p.npmPackage,name:o,version:n}}},A={test:/^https?:\/\/esm.sh/,parse:e=>{let o=new URL(e).pathname.split("/").slice(1),[n,s]=h(o[0]);return{type:p.esmSh,name:n,version:s}}},X=function(e,o){for(let n of o)if(n.test.test(e))return n.parse(e);return null};var W=function(e){let o=JSON.parse(e),n=[];for(let s in o.dependencies)n.push({type:p.npmPackage,name:s,version:o.dependencies[s]});for(let s in o.devDependencies)n.push({type:p.npmPackage,name:s,version:o.devDependencies[s]});return n},q=function(e,o){return X(e,o)??{type:p.unknown,name:e,version:null}},z=function(e,o){let n=JSON.parse(e);return[...Object.values((n==null?void 0:n.imports)??{}),...Object.values((n==null?void 0:n.scopes)??{}).flatMap(t=>Object.values(t))].map(t=>q(t,o))},N=function(e,o){return[/"https?:\/\/[\w/:%#\$&\?\(\)~\.=\+\-@]+"/g,/'https?:\/\/[\w/:%#\$&\?\(\)~\.=\+\-@]+'/g,/`https?:\/\/[\w/:%#\$&\?\(\)~\.=\+\-@]+`/g,/"npm:[\w/:%#\$&\?\(\)~\.=\+\-@]+"/g,/'npm:[\w/:%#\$&\?\(\)~\.=\+\-@]+'/g,/`npm:[\w/:%#\$&\?\(\)~\.=\+\-@]+`/g].flatMap(t=>[...e.matchAll(t)]).map(t=>t[0].slice(1,-1)).map(t=>q(t,o))};var P=e=>typeof e=="string"&&isFinite(parseInt(e)),B=function(e,o){let n=/^([v=\^~])?(\d+|[xX*])(?:\.(\d+|[xX*])(?:\.(\d+|[xX*])(.+)?)?)?$/,s=e.match(n);if(s===null)return null;let t=s[1],a=s[2],r=s[3],i=s[4],l=s[5];P(a)&&(a=`${o.major}`),P(r)&&(r=`${o.minor}`),P(i)&&(i=`${o.patch}`),o.prerelease.length===0?l="":l=(l??"-")[0]+o.prerelease.join(".");let c=`${t??""}${a}`;return r&&(c+=`.${r}`),i&&(c+=`.${i}`),l&&(c+=l),c},K={test:/^https?:\/\/deno.land/,replace:(e,o,n)=>{let s=new URL(e),t=s.pathname.split("/").slice(1),a=t[0]==="x"?t[1]:t[0],[r,i]=h(a);return r!==o?null:(t[t[0]==="x"?1:0]=`${r}@${n}`,`https://deno.land/${t.join("/")}${s.search}`)}},Y={test:/^https?:\/\/raw.githubusercontent.com/,replace:(e,o,n)=>{let s=new URL(e),t=s.pathname.split("/").slice(1);return`${t[0]}/${t[1]}`!==o?null:(t[2]=n,`https://raw.githubusercontent.com/${t.join("/")}${s.search}`)}},Q={test:/^npm:/,replace:(e,o,n)=>{let[s,t]=h(e.slice(4));return s!==o?null:`npm:${s}@${n}`}},Z={test:/^https?:\/\/esm.sh/,replace:(e,o,n)=>{let s=new URL(e),t=s.pathname.split("/").slice(1),[a,r]=h(t[0]);return a!==o?null:`https://esm.sh/${a}@${n}${s.search}`}},x=function(e,o,n,s){for(let t of n)if(t.test.test(e)){let a=t.replace(e,o,s);if(a!==null)return a}return null};import{JSONParser as ee,replaceJSONValue as w}from"https://raw.githubusercontent.com/Tsukina-7mochi/json-edit-formatted/v1.2.0/mod.ts";var oe=function(e,o){let n=ee.parse(e);for(let[s,t]of o){try{w(n,["dependencies",s],JSON.stringify(t));continue}catch{}try{w(n,["devDependencies",s],JSON.stringify(t));continue}catch{}console.error(`Failed to update ${s}`)}return n.stringify()},ne=function(e,o,n){let s=JSON.parse(e),t=ee.parse(e);for(let a in s.imports)for(let[r,i]of o){let l=x(s.imports[a],r,n,i);if(typeof l=="string")try{w(t,["imports",a],JSON.stringify(l));break}catch{console.error(`Failed to update ${r}`)}}for(let a in s.scopes)for(let r in s.scopes[a])for(let[i,l]of o){let c=x(s.scopes[a][r],i,n,l);if(typeof c=="string"){try{w(t,["scopes",a,r],JSON.stringify(c));break}catch{console.error(`Failed to update ${i}`)}break}}return t.stringify()},S=function(e,o,n){let s=[/("https?:\/\/[\w/:%#\$&\?\(\)~\.=\+\-@]+")/g,/('https?:\/\/[\w/:%#\$&\?\(\)~\.=\+\-@]+')/g,/(`https?:\/\/[\w/:%#\$&\?\(\)~\.=\+\-@]+`)/g,/("npm:[\w/:%#\$&\?\(\)~\.=\+\-@]+")/g,/('npm:[\w/:%#\$&\?\(\)~\.=\+\-@]+')/g,/(`npm:[\w/:%#\$&\?\(\)~\.=\+\-@]+`)/g],t=e;for(let a of s)t=t.replaceAll(a,r=>{let i=r.slice(1,-1),l=r[0];for(let[c,d]of o){let m=x(i,c,n,d);if(typeof m=="string")return l+m+l}return r});return t};var $=new Map,L=e=>{let o=$.get(e);return typeof o=="boolean"?o:j.existsSync(C.join(e,"deno.json"),{isFile:!0})||j.existsSync(C.join(e,"deno.jsonc"),{isFile:!0})?($.set(e,!0),!0):($.set(e,!1),!1)},F=[G,_,H,A],T=[K,Y,Q,Z],Re={file:"package.json",resolver:e=>W(e),replacer:(e,o)=>oe(e,o)},ye={file:"import_map.json",enabled:L,resolver:e=>z(e,F),replacer:(e,o)=>ne(e,o,T)},xe={file:"deps.ts",enabled:L,resolver:e=>N(e,F),replacer:(e,o)=>S(e,o,T)},we={file:"**/deps.js",enabled:L,resolver:e=>N(e,F),replacer:(e,o)=>S(e,o,T)},O=[Re,ye,xe,we];var M={name:"Delichon",repository:"Tsukina-7mochi/delichon",version:"0.4.1"};import*as te from"https://deno.land/std@0.184.0/semver/mod.ts";var be=async function(e,o,n){let s=[];for(let t of e){if(!t.found||!t.outdated)continue;let a=t.module;if(typeof a.version!="string")continue;let r=te.parse(t.latestVersion);if(r===null)continue;let i=o?t.latestVersion:B(a.version,r);i!==null&&(console.log(`\x1B[32mUpdate\x1B[0m ${a.name}: ${a.version} -> ${i}`),s.push([a.name,i]))}for(let[t,a]of n.entries()){console.log(`Updating ${t}`);let r=await Deno.readTextFile(t);r=a.replacer(r,s),await Deno.writeTextFileSync(t,r)}},se=be;var ke=async function*(e,o){for(let n of o)for await(let s of re.expandGlob(ae.resolve(e,n)))s.isFile&&(yield[s.path,n])},Ne=function(e){let o=r=>r.found,n=r=>!r.found,s=e.filter(o).filter(r=>r.outdated),t=e.filter(n),a=e.filter(r=>!r.fixed);if(console.log(`\x1B[1m${s.length}\x1B[0m module${s.length>1?"s are":" is"} outdated.`),t.length>0&&(console.log("Could not find following modules:"),console.log("  "+t.map(r=>r.module.name).join(", "))),a.length>0&&(console.log("Version not fixed at following modules:"),console.log("  "+a.map(r=>r.module.name).join(", "))),s.length>0){let r=[["","package","current","latest"]],i={major:"\x1B[31mMajor\x1B[0m",minor:"\x1B[33mMinor\x1B[0m",patch:"\x1B[34mPatch\x1B[0m",pre_release:"\x1B[36mPre\x1B[0m",none:"Latest",not_found:"Not Found"};for(let c of s)r.push([`${i[c.outdatedLevel]}`,c.module.name,c.module.version??"(null)",c.latestVersion]);let l=D(r,!0);console.log(l)}},Pe=async function(){let e=await k({type:"raw_github",name:M.repository,version:M.version},{usePrerelease:!1,level:"major"});e.found&&e.outdated&&(console.log(`Update ${e.latestVersion} found`),console.log("You can update with $\x1B[33mdeno cache --reload\x1B[0m"));let o=new ie.Command().name(M.name).version(M.version).description("Dependency scanner for Node.js and Deno project").option("-u --update [update:boolean]","update versions").option("--fix","fix version").option("-l, --level [level:string]","version update limit",{default:"major"}).option("--prerelease","use prerelease").arguments("[path]"),{options:n,args:s}=await o.parse(Deno.args),t=typeof n.level=="string"?n.level.toLowerCase():n.level;t!=="major"&&t!=="minor"&&t!=="patch"&&(console.error(`${t} is not a valid level.`),Deno.exit(1));let a=t,r=n.prerelease===!0,i=n.update===!0,l=n.fix===!0,c=s.filter(u=>typeof u=="string")[0]??Deno.cwd(),d=[];for(let u of O)(u.enabled===void 0||u.enabled(c))&&d.push(u.file);let m=new Map,v=new Map;for await(let[u,f]of ke(c,d)){console.log(`Scanning ${u}...`);for(let V of O)V.file===f&&m.set(u,V)}for(let[u,f]of m.entries()){let V=await Deno.readTextFile(u);f.resolver(V).forEach(R=>{v.set(`${R.type}-${R.name}-${R.version}`,R)})}let le=[...v.values()],b=[];for(let u of le){let f=await k(u,{level:a,usePrerelease:r});f.found?f.outdatedLevel==="none"?f.fixed?console.log(`\u2705 ${u.name} is up to date`):console.log(`\u26A0\uFE0F ${u.name} may up to date (version not fixed)`):f.fixed?console.log(`\u274C ${u.name} is outdated (${f.outdatedLevel})`):console.log(`\u274C ${u.name} is outdated (${f.outdatedLevel}) and version is not fixed`):console.log(`\u2754${u.name} cannot be resolved (${u.type})`),b.push(f)}console.log(),Ne(b),i&&(console.log(),await se(b,l,m))};Pe();
